#!/usr/bin/env python3
#
# ************************************************************************
# * Dear Student - there is nothing in this file that you need to change.*
# * Please do not make changes to this file.                             *
# ************************************************************************
#
# Copyright 2022 Michael Shafae
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

"""Tool to help students check their program for formatting errors.
    Requires clang/LLVM toolchain."""

import os
import os.path
import sys

MAIN_DIR = os.path.split(os.path.abspath(__file__))[0]
action_dir = os.path.join(os.path.join(MAIN_DIR, '..'), '.action')
sys.path.append(action_dir)

from logger import setup_logger
from ccsrcutilities import format_check
from assessment import build

def main():
    """Entry point, check if _in_file has the correct C++ formatting."""
    logger = setup_logger()
    status = 0
    _in_file = 'viral_math.cc'
    global MAIN_DIR
    in_file = os.path.join(MAIN_DIR, _in_file)
    logger.info('Checking format for file: %s', in_file)
    if not os.path.exists(in_file):
        logger.error('File %s does not exist. Exiting.', in_file)
        status = 1
    elif not build(in_file, 'p1'):
        logger.error('%s is no longer compiling!', in_file)
        logger.warning('A program that does not compile does not get graded.')
        logger.warning('Use the compiler to see where the program is broken.')
        logger.warning(
            'You can use git to revert your changes and ask your instructor for help.'
        )
        status = 1
    else:
        diff = format_check(in_file)
        if len(diff) != 0:
            logger.error("Error: Formatting needs improvement.")
            diff_string = 'Contextual Diff\n' + '\n'.join(diff)
            logger.warning(diff_string)
            status = 1
            logger.error("ðŸ¤¯ðŸ˜³ðŸ˜¤ðŸ˜«ðŸ¤¬")
            logger.error(
                "Your formatting doesn't conform to the Google C++ style."
            )
            logger.error("Use the output from this program to help guide you.")
            logger.error("If you get stuck, ask your instructor for help.")
            logger.error(
                "Remember, you can find the Google C++ style online "
                "at https://google.github.io/styleguide/cppguide.html."
            )
        else:
            logger.info('ðŸ˜€ Formatting looks pretty good! ðŸ¥³')
            logger.info('This is not an auto-grader.')
            logger.info(
                'Make sure you followed all the instructions and requirements.'
            )
    if os.path.exists('p1'):
        os.unlink('p1')

    sys.exit(status)


if __name__ == '__main__':
    main()
